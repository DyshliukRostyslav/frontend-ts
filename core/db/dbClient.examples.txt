/* SELECT */

/// Simple column select
let contacts = await this.dbClient.contacts.find({
  select: {
    Id: true,
    INN: true
  }
});

/// Selecting column with custom name
let contacts = await this.dbClient.contacts.find({
  select: {
    Id: true,
    INN: {
      alias: "CustomINN"
    }
  }
});

/// Selecting columns from linked entities
let contacts = await this.dbClient.contacts.find({
  select: {
    Id: true,
    CreatedBy: {
      Age: true,
      Id: true
    }
  }
});

/* ORDERING */

/// Example of simple ordering
let contacts = await this.dbClient.contacts.find({
  select: {
    Id: true
  },
  orderBy: {
    Age: 'desc'
  }
});

/// Example or ordering with linked entities
let contacts = await this.dbClient.contacts.find({
  select: {
    Id: true
  },
  orderBy: {
    CreatedBy: {
      INN: 'asc',
      Age: 'desc'
    },
    Age: 'desc'
  }
});

/* SELECT WITH EXISTS */

///In order to add exists/notExists filters need create extensions for interface {EntityName}Where
///Example for entity Specification
import SpecificationListItem, { SpecificationListItemWhere } from "../SpecificationListItem";
import Specification from "../Specification";

declare module "../Specification" {
  interface SpecificationWhere {
    //${Related_Entity_Name}: WhereExistsCondition<{Related_Entity_Interface},
    //                          {Primary_Entity_Interface}, {Related_Entity_Where_Interface}>

    $SpecificationListItem?: WhereExistsCondition<SpecificationListItem, Specification, SpecificationListItemWhere>
  }
}


/// Example of simple select with exists filter
let result = await dbClient.specificationTypes.find({
  select: {
    Id: true,
    Name: true
  },
  where: {
    $Specification: { //means in table Specification exists records where Specification.TypeId = SpecificationType.Id
      exists: {
        on: "Type"
      }
    }
  }
});

/// Example of simple select with not exists filter and sub conditions
let result = await dbClient.specificationTypes.find({
  select: {
    Id: true,
    Name: true
  },
  where: {
    $Specification: {
      notExists: {
        on: "Type",
        equals: "Id", // optional property. if not set - will be "Id"
        where: { //here creating filters for table Specification
          SpecInConditionTypeId: constants.SPEC_IN_CONDITION_TYPE.SALE_CONDITIONS
        }
      }
    }
  }
});
